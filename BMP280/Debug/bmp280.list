
BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080037cc  080037cc  000047cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000008  080037d4  00005008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  20000014  080037e0  00005014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000088  080037e0  00005088  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c54d  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ee2  00000000  00000000  00011591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001188  00000000  00000000  00013478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000d41  00000000  00000000  00014600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00020e29  00000000  00000000  00015341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e0f3  00000000  00000000  0003616a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d4be2  00000000  00000000  0004425d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00118e3f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004894  00000000  00000000  00118e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000004c  00000000  00000000  0011d718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08003708 	.word	0x08003708

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08003708 	.word	0x08003708

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr
	...

080001b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b6:	f000 fa8d 	bl	80006d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ba:	f000 f837 	bl	800022c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001be:	f000 f88d 	bl	80002dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c2:	f000 f8e9 	bl	8000398 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c6:	f000 f8a7 	bl	8000318 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t chipID = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	73fb      	strb	r3, [r7, #15]

  //HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS_L, id, 1, &chipID, 1, 1000);
  uint8_t BMP280_Config[2]={0xB3,0xA0};
 80001ce:	f24a 03b3 	movw	r3, #41139	@ 0xa0b3
 80001d2:	81bb      	strh	r3, [r7, #12]
  //I2C_Write_Register(DEVICE_ADDRESS_L, 0xF5, 0b10010000);
  HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS_L,ctrl_meas,1,BMP280_Config,2,0x10000);
 80001d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d8:	9302      	str	r3, [sp, #8]
 80001da:	2302      	movs	r3, #2
 80001dc:	9301      	str	r3, [sp, #4]
 80001de:	f107 030c 	add.w	r3, r7, #12
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	2301      	movs	r3, #1
 80001e6:	22f4      	movs	r2, #244	@ 0xf4
 80001e8:	21ec      	movs	r1, #236	@ 0xec
 80001ea:	480f      	ldr	r0, [pc, #60]	@ (8000228 <main+0x78>)
 80001ec:	f001 f832 	bl	8001254 <HAL_I2C_Mem_Write>
  //I2C_Write_Register(DEVICE_ADDRESS_L, 0xF4, 0b01010111);
  //HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDRESS_L,config , 3, 500);
  //status=HAL_I2C_Mem_Read(&hi2c1,DEVICE_ADDRESS_L,ctrl_meas,1,BMP280_Config,2,0x10000);

  uint8_t data[2]  = {0,0};
 80001f0:	2300      	movs	r3, #0
 80001f2:	813b      	strh	r3, [r7, #8]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(50);
 80001f4:	2032      	movs	r0, #50	@ 0x32
 80001f6:	f000 faf3 	bl	80007e0 <HAL_Delay>
	//HAL_I2C_Mem_Read(&hi2c1, BMP280_Address, 0xF7, 1, &BMP280_Data[0], 7, 500);
	//HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDRESS_L,temp_msb , 1, 500);
	unsigned char data_address = 0xFA;
 80001fa:	23fa      	movs	r3, #250	@ 0xfa
 80001fc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDRESS_L,&data_address , 1, 500);
 80001fe:	1dfa      	adds	r2, r7, #7
 8000200:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2301      	movs	r3, #1
 8000208:	21ec      	movs	r1, #236	@ 0xec
 800020a:	4807      	ldr	r0, [pc, #28]	@ (8000228 <main+0x78>)
 800020c:	f000 fe14 	bl	8000e38 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Receive_IT(&hi2c1, DEVICE_ADDRESS_L, data, 2); // with interrupt
	HAL_I2C_Master_Receive(&hi2c1, DEVICE_ADDRESS_L|0x01, data, 2,500);
 8000210:	f107 0208 	add.w	r2, r7, #8
 8000214:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2302      	movs	r3, #2
 800021c:	21ed      	movs	r1, #237	@ 0xed
 800021e:	4802      	ldr	r0, [pc, #8]	@ (8000228 <main+0x78>)
 8000220:	f000 ff22 	bl	8001068 <HAL_I2C_Master_Receive>
  {
 8000224:	bf00      	nop
 8000226:	e7e5      	b.n	80001f4 <main+0x44>
 8000228:	20000030 	.word	0x20000030

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b09a      	sub	sp, #104	@ 0x68
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0320 	add.w	r3, r7, #32
 8000236:	2248      	movs	r2, #72	@ 0x48
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 fa38 	bl	80036b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]
 800024e:	615a      	str	r2, [r3, #20]
 8000250:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000252:	4b21      	ldr	r3, [pc, #132]	@ (80002d8 <SystemClock_Config+0xac>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800025a:	4a1f      	ldr	r2, [pc, #124]	@ (80002d8 <SystemClock_Config+0xac>)
 800025c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000260:	6013      	str	r3, [r2, #0]
 8000262:	4b1d      	ldr	r3, [pc, #116]	@ (80002d8 <SystemClock_Config+0xac>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800026e:	2322      	movs	r3, #34	@ 0x22
 8000270:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2340      	movs	r3, #64	@ 0x40
 800027e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000280:	2300      	movs	r3, #0
 8000282:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000284:	23a0      	movs	r3, #160	@ 0xa0
 8000286:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	2300      	movs	r3, #0
 800028a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0320 	add.w	r3, r7, #32
 8000290:	4618      	mov	r0, r3
 8000292:	f002 f801 	bl	8002298 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800029c:	f000 f8d6 	bl	800044c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80002a0:	236f      	movs	r3, #111	@ 0x6f
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2101      	movs	r1, #1
 80002c0:	4618      	mov	r0, r3
 80002c2:	f002 fb5d 	bl	8002980 <HAL_RCC_ClockConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002cc:	f000 f8be 	bl	800044c <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3768      	adds	r7, #104	@ 0x68
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	58000400 	.word	0x58000400

080002dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b094      	sub	sp, #80	@ 0x50
 80002e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002e2:	463b      	mov	r3, r7
 80002e4:	2250      	movs	r2, #80	@ 0x50
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f003 f9e1 	bl	80036b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002f2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002f4:	2300      	movs	r3, #0
 80002f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80002f8:	2300      	movs	r3, #0
 80002fa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002fc:	463b      	mov	r3, r7
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 ff4f 	bl	80031a2 <HAL_RCCEx_PeriphCLKConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800030a:	f000 f89f 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800030e:	bf00      	nop
 8000310:	3750      	adds	r7, #80	@ 0x50
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800031c:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <MX_I2C1_Init+0x74>)
 800031e:	4a1c      	ldr	r2, [pc, #112]	@ (8000390 <MX_I2C1_Init+0x78>)
 8000320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000322:	4b1a      	ldr	r3, [pc, #104]	@ (800038c <MX_I2C1_Init+0x74>)
 8000324:	4a1b      	ldr	r2, [pc, #108]	@ (8000394 <MX_I2C1_Init+0x7c>)
 8000326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <MX_I2C1_Init+0x74>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032e:	4b17      	ldr	r3, [pc, #92]	@ (800038c <MX_I2C1_Init+0x74>)
 8000330:	2201      	movs	r2, #1
 8000332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000334:	4b15      	ldr	r3, [pc, #84]	@ (800038c <MX_I2C1_Init+0x74>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800033a:	4b14      	ldr	r3, [pc, #80]	@ (800038c <MX_I2C1_Init+0x74>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <MX_I2C1_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000352:	480e      	ldr	r0, [pc, #56]	@ (800038c <MX_I2C1_Init+0x74>)
 8000354:	f000 fcd4 	bl	8000d00 <HAL_I2C_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800035e:	f000 f875 	bl	800044c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000362:	2100      	movs	r1, #0
 8000364:	4809      	ldr	r0, [pc, #36]	@ (800038c <MX_I2C1_Init+0x74>)
 8000366:	f001 fb83 	bl	8001a70 <HAL_I2CEx_ConfigAnalogFilter>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000370:	f000 f86c 	bl	800044c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000374:	2100      	movs	r1, #0
 8000376:	4805      	ldr	r0, [pc, #20]	@ (800038c <MX_I2C1_Init+0x74>)
 8000378:	f001 fbc5 	bl	8001b06 <HAL_I2CEx_ConfigDigitalFilter>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000382:	f000 f863 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000030 	.word	0x20000030
 8000390:	40005400 	.word	0x40005400
 8000394:	00b07cb4 	.word	0x00b07cb4

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ac:	2004      	movs	r0, #4
 80003ae:	f7ff fee5 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b2:	2002      	movs	r0, #2
 80003b4:	f7ff fee2 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff fedf 	bl	800017c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003be:	2008      	movs	r0, #8
 80003c0:	f7ff fedc 	bl	800017c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2123      	movs	r1, #35	@ 0x23
 80003c8:	481d      	ldr	r0, [pc, #116]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003ca:	f000 fc81 	bl	8000cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003ce:	2310      	movs	r3, #16
 80003d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	4819      	ldr	r0, [pc, #100]	@ (8000444 <MX_GPIO_Init+0xac>)
 80003e0:	f000 fb06 	bl	80009f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80003e4:	2323      	movs	r3, #35	@ 0x23
 80003e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4619      	mov	r1, r3
 80003f8:	4811      	ldr	r0, [pc, #68]	@ (8000440 <MX_GPIO_Init+0xa8>)
 80003fa:	f000 faf9 	bl	80009f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80003fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000402:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000404:	2302      	movs	r3, #2
 8000406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000410:	230a      	movs	r3, #10
 8000412:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4619      	mov	r1, r3
 8000418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041c:	f000 fae8 	bl	80009f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000420:	2303      	movs	r3, #3
 8000422:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000424:	2300      	movs	r3, #0
 8000426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4619      	mov	r1, r3
 8000430:	4805      	ldr	r0, [pc, #20]	@ (8000448 <MX_GPIO_Init+0xb0>)
 8000432:	f000 fadd 	bl	80009f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000436:	bf00      	nop
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	48000400 	.word	0x48000400
 8000444:	48000800 	.word	0x48000800
 8000448:	48000c00 	.word	0x48000c00

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <Error_Handler+0x8>

08000458 <LL_AHB2_GRP1_EnableClock>:
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000464:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4013      	ands	r3, r2
 800047a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800047c:	68fb      	ldr	r3, [r7, #12]
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800048a:	b480      	push	{r7}
 800048c:	b085      	sub	sp, #20
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000496:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000498:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4313      	orrs	r3, r2
 80004a0:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80004a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4013      	ands	r3, r2
 80004ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ae:	68fb      	ldr	r3, [r7, #12]
}
 80004b0:	bf00      	nop
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b09c      	sub	sp, #112	@ 0x70
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	2250      	movs	r2, #80	@ 0x50
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f003 f8df 	bl	80036b0 <memset>
  if(hi2c->Instance==I2C1)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a17      	ldr	r2, [pc, #92]	@ (8000554 <HAL_I2C_MspInit+0x88>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d126      	bne.n	800054a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004fc:	2304      	movs	r3, #4
 80004fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000500:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	4618      	mov	r0, r3
 800050c:	f002 fe49 	bl	80031a2 <HAL_RCCEx_PeriphCLKConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000516:	f7ff ff99 	bl	800044c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	2002      	movs	r0, #2
 800051c:	f7ff ff9c 	bl	8000458 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000520:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000524:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000526:	2312      	movs	r3, #18
 8000528:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000532:	2304      	movs	r3, #4
 8000534:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000536:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800053a:	4619      	mov	r1, r3
 800053c:	4806      	ldr	r0, [pc, #24]	@ (8000558 <HAL_I2C_MspInit+0x8c>)
 800053e:	f000 fa57 	bl	80009f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000542:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000546:	f7ff ffa0 	bl	800048a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800054a:	bf00      	nop
 800054c:	3770      	adds	r7, #112	@ 0x70
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40005400 	.word	0x40005400
 8000558:	48000400 	.word	0x48000400

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <NMI_Handler+0x4>

08000564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <MemManage_Handler+0x4>

08000574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <UsageFault_Handler+0x4>

08000584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b2:	f000 f8e9 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80005c0:	4b24      	ldr	r3, [pc, #144]	@ (8000654 <SystemInit+0x98>)
 80005c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005c6:	4a23      	ldr	r2, [pc, #140]	@ (8000654 <SystemInit+0x98>)
 80005c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80005d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80005e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005e4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80005e8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80005ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005f4:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <SystemInit+0x9c>)
 80005f6:	4013      	ands	r3, r2
 80005f8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80005fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000602:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000606:	f023 0305 	bic.w	r3, r3, #5
 800060a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800060e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800061a:	f023 0301 	bic.w	r3, r3, #1
 800061e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000626:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <SystemInit+0xa0>)
 8000628:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800062a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800062e:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <SystemInit+0xa0>)
 8000630:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800063c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000640:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00
 8000658:	faf6fefb 	.word	0xfaf6fefb
 800065c:	22041000 	.word	0x22041000

08000660 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000660:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000662:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000664:	3304      	adds	r3, #4

08000666 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000666:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000668:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800066a:	d3f9      	bcc.n	8000660 <CopyDataInit>
  bx lr
 800066c:	4770      	bx	lr

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800066e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000670:	3004      	adds	r0, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000672:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>
  bx lr
 8000676:	4770      	bx	lr

08000678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000678:	480c      	ldr	r0, [pc, #48]	@ (80006ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800067c:	f7ff ff9e 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000680:	480b      	ldr	r0, [pc, #44]	@ (80006b0 <LoopForever+0x6>)
 8000682:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <LoopForever+0xa>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	@ (80006b8 <LoopForever+0xe>)
 8000686:	2300      	movs	r3, #0
 8000688:	f7ff ffed 	bl	8000666 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800068c:	480b      	ldr	r0, [pc, #44]	@ (80006bc <LoopForever+0x12>)
 800068e:	490c      	ldr	r1, [pc, #48]	@ (80006c0 <LoopForever+0x16>)
 8000690:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <LoopForever+0x1a>)
 8000692:	2300      	movs	r3, #0
 8000694:	f7ff ffe7 	bl	8000666 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000698:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <LoopForever+0x1e>)
 800069a:	490c      	ldr	r1, [pc, #48]	@ (80006cc <LoopForever+0x22>)
 800069c:	2300      	movs	r3, #0
 800069e:	f7ff ffe8 	bl	8000672 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a2:	f003 f80d 	bl	80036c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006a6:	f7ff fd83 	bl	80001b0 <main>

080006aa <LoopForever>:

LoopForever:
  b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   r0, =_estack
 80006ac:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000014 	.word	0x20000014
 80006b8:	080037d4 	.word	0x080037d4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80006bc:	20030000 	.word	0x20030000
 80006c0:	20030000 	.word	0x20030000
 80006c4:	080037e0 	.word	0x080037e0
  INIT_BSS _sbss, _ebss
 80006c8:	20000014 	.word	0x20000014
 80006cc:	20000088 	.word	0x20000088

080006d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_IRQHandler>
	...

080006d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <HAL_Init+0x3c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_Init+0x3c>)
 80006e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ea:	2003      	movs	r0, #3
 80006ec:	f000 f94e 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 f80f 	bl	8000714 <HAL_InitTick>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d002      	beq.n	8000702 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006fc:	2301      	movs	r3, #1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	e001      	b.n	8000706 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000702:	f7ff fedb 	bl	80004bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000706:	79fb      	ldrb	r3, [r7, #7]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58004000 	.word	0x58004000

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800071c:	2300      	movs	r3, #0
 800071e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <HAL_InitTick+0x6c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d024      	beq.n	8000772 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000728:	f002 fad6 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 800072c:	4602      	mov	r2, r0
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <HAL_InitTick+0x6c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4619      	mov	r1, r3
 8000734:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000738:	fbb3 f3f1 	udiv	r3, r3, r1
 800073c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f948 	bl	80009d6 <HAL_SYSTICK_Config>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d10f      	bne.n	800076c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b0f      	cmp	r3, #15
 8000750:	d809      	bhi.n	8000766 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000752:	2200      	movs	r2, #0
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800075a:	f000 f922 	bl	80009a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800075e:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <HAL_InitTick+0x70>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	e007      	b.n	8000776 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e004      	b.n	8000776 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800076c:	2301      	movs	r3, #1
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	e001      	b.n	8000776 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000776:	7bfb      	ldrb	r3, [r7, #15]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000010 	.word	0x20000010
 8000784:	2000000c 	.word	0x2000000c

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_IncTick+0x20>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	461a      	mov	r2, r3
 8000792:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_IncTick+0x24>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4413      	add	r3, r2
 8000798:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <HAL_IncTick+0x24>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000010 	.word	0x20000010
 80007ac:	20000084 	.word	0x20000084

080007b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return uwTick;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <HAL_GetTick+0x14>)
 80007b6:	681b      	ldr	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000084 	.word	0x20000084

080007c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80007cc:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <HAL_GetTickPrio+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2000000c 	.word	0x2000000c

080007e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e8:	f7ff ffe2 	bl	80007b0 <HAL_GetTick>
 80007ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80007f8:	d005      	beq.n	8000806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <HAL_Delay+0x44>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000806:	bf00      	nop
 8000808:	f7ff ffd2 	bl	80007b0 <HAL_GetTick>
 800080c:	4602      	mov	r2, r0
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d8f7      	bhi.n	8000808 <HAL_Delay+0x28>
  {
  }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000010 	.word	0x20000010

08000828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000844:	4013      	ands	r3, r2
 8000846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085a:	4a04      	ldr	r2, [pc, #16]	@ (800086c <__NVIC_SetPriorityGrouping+0x44>)
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	60d3      	str	r3, [r2, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	@ (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	@ (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	@ 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	@ 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000958:	d301      	bcc.n	800095e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2301      	movs	r3, #1
 800095c:	e00f      	b.n	800097e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <SysTick_Config+0x40>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000966:	210f      	movs	r1, #15
 8000968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800096c:	f7ff ff8e 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <SysTick_Config+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <SysTick_Config+0x40>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff47 	bl	8000828 <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff5e 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff90 	bl	80008e0 <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5f 	bl	800088c <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff ffb2 	bl	8000948 <SysTick_Config>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fe:	e14c      	b.n	8000c9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	2101      	movs	r1, #1
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f000 813e 	beq.w	8000c94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d005      	beq.n	8000a30 <HAL_GPIO_Init+0x40>
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d130      	bne.n	8000a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a66:	2201      	movs	r2, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	f003 0201 	and.w	r2, r3, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d017      	beq.n	8000ace <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d123      	bne.n	8000b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	08da      	lsrs	r2, r3, #3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3208      	adds	r2, #8
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	691a      	ldr	r2, [r3, #16]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3208      	adds	r2, #8
 8000b1c:	6939      	ldr	r1, [r7, #16]
 8000b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0203 	and.w	r2, r3, #3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 8098 	beq.w	8000c94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b64:	4a54      	ldr	r2, [pc, #336]	@ (8000cb8 <HAL_GPIO_Init+0x2c8>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b8e:	d019      	beq.n	8000bc4 <HAL_GPIO_Init+0x1d4>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4a      	ldr	r2, [pc, #296]	@ (8000cbc <HAL_GPIO_Init+0x2cc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d013      	beq.n	8000bc0 <HAL_GPIO_Init+0x1d0>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a49      	ldr	r2, [pc, #292]	@ (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00d      	beq.n	8000bbc <HAL_GPIO_Init+0x1cc>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a48      	ldr	r2, [pc, #288]	@ (8000cc4 <HAL_GPIO_Init+0x2d4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <HAL_GPIO_Init+0x1c8>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a47      	ldr	r2, [pc, #284]	@ (8000cc8 <HAL_GPIO_Init+0x2d8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d101      	bne.n	8000bb4 <HAL_GPIO_Init+0x1c4>
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	e008      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	e006      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e004      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <HAL_GPIO_Init+0x1d6>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	f002 0203 	and.w	r2, r2, #3
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	4093      	lsls	r3, r2
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd6:	4938      	ldr	r1, [pc, #224]	@ (8000cb8 <HAL_GPIO_Init+0x2c8>)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000be4:	4b39      	ldr	r3, [pc, #228]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c08:	4a30      	ldr	r2, [pc, #192]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c32:	4a26      	ldr	r2, [pc, #152]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f47f aeab 	bne.w	8000a00 <HAL_GPIO_Init+0x10>
  }
}
 8000caa:	bf00      	nop
 8000cac:	bf00      	nop
 8000cae:	371c      	adds	r7, #28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	48001000 	.word	0x48001000
 8000ccc:	58000800 	.word	0x58000800

08000cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ce0:	787b      	ldrb	r3, [r7, #1]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cec:	e002      	b.n	8000cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e08d      	b.n	8000e2e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d106      	bne.n	8000d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fbd0 	bl	80004cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2224      	movs	r2, #36	@ 0x24
 8000d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000d50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d107      	bne.n	8000d7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	e006      	b.n	8000d88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000d86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d108      	bne.n	8000da2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	e007      	b.n	8000db2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000dd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691a      	ldr	r2, [r3, #16]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69d9      	ldr	r1, [r3, #28]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a1a      	ldr	r2, [r3, #32]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	461a      	mov	r2, r3
 8000e44:	460b      	mov	r3, r1
 8000e46:	817b      	strh	r3, [r7, #10]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	f040 80fd 	bne.w	8001054 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d101      	bne.n	8000e68 <HAL_I2C_Master_Transmit+0x30>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e0f6      	b.n	8001056 <HAL_I2C_Master_Transmit+0x21e>
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e70:	f7ff fc9e 	bl	80007b0 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2319      	movs	r3, #25
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 fb72 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0e1      	b.n	8001056 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2221      	movs	r2, #33	@ 0x21
 8000e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2210      	movs	r2, #16
 8000e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	893a      	ldrh	r2, [r7, #8]
 8000eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	2bff      	cmp	r3, #255	@ 0xff
 8000ec2:	d906      	bls.n	8000ed2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	22ff      	movs	r2, #255	@ 0xff
 8000ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000eca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e007      	b.n	8000ee2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000edc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ee0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d024      	beq.n	8000f34 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	8979      	ldrh	r1, [r7, #10]
 8000f26:	4b4e      	ldr	r3, [pc, #312]	@ (8001060 <HAL_I2C_Master_Transmit+0x228>)
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f000 fd6d 	bl	8001a0c <I2C_TransferConfig>
 8000f32:	e066      	b.n	8001002 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	8979      	ldrh	r1, [r7, #10]
 8000f3c:	4b48      	ldr	r3, [pc, #288]	@ (8001060 <HAL_I2C_Master_Transmit+0x228>)
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f000 fd62 	bl	8001a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f48:	e05b      	b.n	8001002 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	6a39      	ldr	r1, [r7, #32]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 fb65 	bl	800161e <I2C_WaitOnTXISFlagUntilTimeout>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e07b      	b.n	8001056 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d034      	beq.n	8001002 <HAL_I2C_Master_Transmit+0x1ca>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d130      	bne.n	8001002 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2180      	movs	r1, #128	@ 0x80
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	f000 fade 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e04d      	b.n	8001056 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2bff      	cmp	r3, #255	@ 0xff
 8000fc2:	d90e      	bls.n	8000fe2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	22ff      	movs	r2, #255	@ 0xff
 8000fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	8979      	ldrh	r1, [r7, #10]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 fd16 	bl	8001a0c <I2C_TransferConfig>
 8000fe0:	e00f      	b.n	8001002 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	8979      	ldrh	r1, [r7, #10]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f000 fd05 	bl	8001a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001006:	b29b      	uxth	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d19e      	bne.n	8000f4a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	6a39      	ldr	r1, [r7, #32]
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f000 fb4b 	bl	80016ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e01a      	b.n	8001056 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2220      	movs	r2, #32
 8001026:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6859      	ldr	r1, [r3, #4]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_I2C_Master_Transmit+0x22c>)
 8001034:	400b      	ands	r3, r1
 8001036:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2220      	movs	r2, #32
 800103c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	e000      	b.n	8001056 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001054:	2302      	movs	r3, #2
  }
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	80002000 	.word	0x80002000
 8001064:	fe00e800 	.word	0xfe00e800

08001068 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	817b      	strh	r3, [r7, #10]
 8001078:	4613      	mov	r3, r2
 800107a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b20      	cmp	r3, #32
 8001086:	f040 80db 	bne.w	8001240 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001090:	2b01      	cmp	r3, #1
 8001092:	d101      	bne.n	8001098 <HAL_I2C_Master_Receive+0x30>
 8001094:	2302      	movs	r3, #2
 8001096:	e0d4      	b.n	8001242 <HAL_I2C_Master_Receive+0x1da>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010a0:	f7ff fb86 	bl	80007b0 <HAL_GetTick>
 80010a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2319      	movs	r3, #25
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 fa5a 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0bf      	b.n	8001242 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2222      	movs	r2, #34	@ 0x22
 80010c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2210      	movs	r2, #16
 80010ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	893a      	ldrh	r2, [r7, #8]
 80010e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	2bff      	cmp	r3, #255	@ 0xff
 80010f2:	d90e      	bls.n	8001112 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	22ff      	movs	r2, #255	@ 0xff
 80010f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	8979      	ldrh	r1, [r7, #10]
 8001102:	4b52      	ldr	r3, [pc, #328]	@ (800124c <HAL_I2C_Master_Receive+0x1e4>)
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 fc7e 	bl	8001a0c <I2C_TransferConfig>
 8001110:	e06d      	b.n	80011ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001116:	b29a      	uxth	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001120:	b2da      	uxtb	r2, r3
 8001122:	8979      	ldrh	r1, [r7, #10]
 8001124:	4b49      	ldr	r3, [pc, #292]	@ (800124c <HAL_I2C_Master_Receive+0x1e4>)
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f000 fc6d 	bl	8001a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001132:	e05c      	b.n	80011ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	6a39      	ldr	r1, [r7, #32]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 fafb 	bl	8001734 <I2C_WaitOnRXNEFlagUntilTimeout>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e07c      	b.n	8001242 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001164:	3b01      	subs	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001170:	b29b      	uxth	r3, r3
 8001172:	3b01      	subs	r3, #1
 8001174:	b29a      	uxth	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800117e:	b29b      	uxth	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d034      	beq.n	80011ee <HAL_I2C_Master_Receive+0x186>
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001188:	2b00      	cmp	r3, #0
 800118a:	d130      	bne.n	80011ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	2200      	movs	r2, #0
 8001194:	2180      	movs	r1, #128	@ 0x80
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f000 f9e8 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e04d      	b.n	8001242 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2bff      	cmp	r3, #255	@ 0xff
 80011ae:	d90e      	bls.n	80011ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	22ff      	movs	r2, #255	@ 0xff
 80011b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	8979      	ldrh	r1, [r7, #10]
 80011be:	2300      	movs	r3, #0
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 fc20 	bl	8001a0c <I2C_TransferConfig>
 80011cc:	e00f      	b.n	80011ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	8979      	ldrh	r1, [r7, #10]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f000 fc0f 	bl	8001a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d19d      	bne.n	8001134 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	6a39      	ldr	r1, [r7, #32]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 fa55 	bl	80016ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e01a      	b.n	8001242 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2220      	movs	r2, #32
 8001212:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6859      	ldr	r1, [r3, #4]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <HAL_I2C_Master_Receive+0x1e8>)
 8001220:	400b      	ands	r3, r1
 8001222:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2220      	movs	r2, #32
 8001228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	e000      	b.n	8001242 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001240:	2302      	movs	r3, #2
  }
}
 8001242:	4618      	mov	r0, r3
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	80002400 	.word	0x80002400
 8001250:	fe00e800 	.word	0xfe00e800

08001254 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af02      	add	r7, sp, #8
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4603      	mov	r3, r0
 8001264:	817b      	strh	r3, [r7, #10]
 8001266:	460b      	mov	r3, r1
 8001268:	813b      	strh	r3, [r7, #8]
 800126a:	4613      	mov	r3, r2
 800126c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b20      	cmp	r3, #32
 8001278:	f040 80f9 	bne.w	800146e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d002      	beq.n	8001288 <HAL_I2C_Mem_Write+0x34>
 8001282:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001284:	2b00      	cmp	r3, #0
 8001286:	d105      	bne.n	8001294 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800128e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e0ed      	b.n	8001470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <HAL_I2C_Mem_Write+0x4e>
 800129e:	2302      	movs	r3, #2
 80012a0:	e0e6      	b.n	8001470 <HAL_I2C_Mem_Write+0x21c>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012aa:	f7ff fa81 	bl	80007b0 <HAL_GetTick>
 80012ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2319      	movs	r3, #25
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 f955 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0d1      	b.n	8001470 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2221      	movs	r2, #33	@ 0x21
 80012d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2240      	movs	r2, #64	@ 0x40
 80012d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2200      	movs	r2, #0
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80012f4:	88f8      	ldrh	r0, [r7, #6]
 80012f6:	893a      	ldrh	r2, [r7, #8]
 80012f8:	8979      	ldrh	r1, [r7, #10]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	4603      	mov	r3, r0
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f8b9 	bl	800147c <I2C_RequestMemoryWrite>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0a9      	b.n	8001470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001320:	b29b      	uxth	r3, r3
 8001322:	2bff      	cmp	r3, #255	@ 0xff
 8001324:	d90e      	bls.n	8001344 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	22ff      	movs	r2, #255	@ 0xff
 800132a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001330:	b2da      	uxtb	r2, r3
 8001332:	8979      	ldrh	r1, [r7, #10]
 8001334:	2300      	movs	r3, #0
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f000 fb65 	bl	8001a0c <I2C_TransferConfig>
 8001342:	e00f      	b.n	8001364 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001348:	b29a      	uxth	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001352:	b2da      	uxtb	r2, r3
 8001354:	8979      	ldrh	r1, [r7, #10]
 8001356:	2300      	movs	r3, #0
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f000 fb54 	bl	8001a0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 f958 	bl	800161e <I2C_WaitOnTXISFlagUntilTimeout>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e07b      	b.n	8001470 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001392:	b29b      	uxth	r3, r3
 8001394:	3b01      	subs	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d034      	beq.n	800141c <HAL_I2C_Mem_Write+0x1c8>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d130      	bne.n	800141c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c0:	2200      	movs	r2, #0
 80013c2:	2180      	movs	r1, #128	@ 0x80
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 f8d1 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e04d      	b.n	8001470 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013d8:	b29b      	uxth	r3, r3
 80013da:	2bff      	cmp	r3, #255	@ 0xff
 80013dc:	d90e      	bls.n	80013fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	22ff      	movs	r2, #255	@ 0xff
 80013e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	2300      	movs	r3, #0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 fb09 	bl	8001a0c <I2C_TransferConfig>
 80013fa:	e00f      	b.n	800141c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001400:	b29a      	uxth	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800140a:	b2da      	uxtb	r2, r3
 800140c:	8979      	ldrh	r1, [r7, #10]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 faf8 	bl	8001a0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001420:	b29b      	uxth	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d19e      	bne.n	8001364 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f93e 	bl	80016ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e01a      	b.n	8001470 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2220      	movs	r2, #32
 8001440:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <HAL_I2C_Mem_Write+0x224>)
 800144e:	400b      	ands	r3, r1
 8001450:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2220      	movs	r2, #32
 8001456:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800146e:	2302      	movs	r3, #2
  }
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	fe00e800 	.word	0xfe00e800

0800147c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af02      	add	r7, sp, #8
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	4608      	mov	r0, r1
 8001486:	4611      	mov	r1, r2
 8001488:	461a      	mov	r2, r3
 800148a:	4603      	mov	r3, r0
 800148c:	817b      	strh	r3, [r7, #10]
 800148e:	460b      	mov	r3, r1
 8001490:	813b      	strh	r3, [r7, #8]
 8001492:	4613      	mov	r3, r2
 8001494:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	8979      	ldrh	r1, [r7, #10]
 800149c:	4b20      	ldr	r3, [pc, #128]	@ (8001520 <I2C_RequestMemoryWrite+0xa4>)
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 fab1 	bl	8001a0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	69b9      	ldr	r1, [r7, #24]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 f8b5 	bl	800161e <I2C_WaitOnTXISFlagUntilTimeout>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e02c      	b.n	8001518 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d105      	bne.n	80014d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014c4:	893b      	ldrh	r3, [r7, #8]
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80014ce:	e015      	b.n	80014fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80014d0:	893b      	ldrh	r3, [r7, #8]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	69b9      	ldr	r1, [r7, #24]
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f000 f89b 	bl	800161e <I2C_WaitOnTXISFlagUntilTimeout>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e012      	b.n	8001518 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80014f2:	893b      	ldrh	r3, [r7, #8]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f830 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	80002000 	.word	0x80002000

08001524 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b02      	cmp	r3, #2
 8001538:	d103      	bne.n	8001542 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	2b01      	cmp	r3, #1
 800154e:	d007      	beq.n	8001560 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	619a      	str	r2, [r3, #24]
  }
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800157c:	e03b      	b.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	6839      	ldr	r1, [r7, #0]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 f962 	bl	800184c <I2C_IsErrorOccurred>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e041      	b.n	8001616 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001598:	d02d      	beq.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159a:	f7ff f909 	bl	80007b0 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d302      	bcc.n	80015b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d122      	bne.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	699a      	ldr	r2, [r3, #24]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	4013      	ands	r3, r2
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	429a      	cmp	r2, r3
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d113      	bne.n	80015f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f043 0220 	orr.w	r2, r3, #32
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699a      	ldr	r2, [r3, #24]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4013      	ands	r3, r2
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	bf0c      	ite	eq
 8001606:	2301      	moveq	r3, #1
 8001608:	2300      	movne	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	429a      	cmp	r2, r3
 8001612:	d0b4      	beq.n	800157e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800162a:	e033      	b.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f90b 	bl	800184c <I2C_IsErrorOccurred>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e031      	b.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001646:	d025      	beq.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001648:	f7ff f8b2 	bl	80007b0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	429a      	cmp	r2, r3
 8001656:	d302      	bcc.n	800165e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d11a      	bne.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b02      	cmp	r3, #2
 800166a:	d013      	beq.n	8001694 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001670:	f043 0220 	orr.w	r2, r3, #32
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2220      	movs	r2, #32
 800167c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e007      	b.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d1c4      	bne.n	800162c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016b8:	e02f      	b.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f8c4 	bl	800184c <I2C_IsErrorOccurred>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e02d      	b.n	800172a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ce:	f7ff f86f 	bl	80007b0 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d302      	bcc.n	80016e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d11a      	bne.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0320 	and.w	r3, r3, #32
 80016ee:	2b20      	cmp	r3, #32
 80016f0:	d013      	beq.n	800171a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f6:	f043 0220 	orr.w	r2, r3, #32
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e007      	b.n	800172a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	d1c8      	bne.n	80016ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001744:	e071      	b.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	68f8      	ldr	r0, [r7, #12]
 800174c:	f000 f87e 	bl	800184c <I2C_IsErrorOccurred>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b20      	cmp	r3, #32
 8001766:	d13b      	bne.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d138      	bne.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b04      	cmp	r3, #4
 800177a:	d105      	bne.n	8001788 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b10      	cmp	r3, #16
 8001794:	d121      	bne.n	80017da <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2210      	movs	r2, #16
 800179c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2204      	movs	r2, #4
 80017a2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2220      	movs	r2, #32
 80017aa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6859      	ldr	r1, [r3, #4]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80017b8:	400b      	ands	r3, r1
 80017ba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	75fb      	strb	r3, [r7, #23]
 80017d8:	e002      	b.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80017e0:	f7fe ffe6 	bl	80007b0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d302      	bcc.n	80017f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d116      	bne.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b04      	cmp	r3, #4
 8001808:	d00f      	beq.n	800182a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f043 0220 	orr.w	r2, r3, #32
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	d002      	beq.n	800183e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d083      	beq.n	8001746 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800183e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	fe00e800 	.word	0xfe00e800

0800184c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d068      	beq.n	800194a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2210      	movs	r2, #16
 800187e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001880:	e049      	b.n	8001916 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001888:	d045      	beq.n	8001916 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800188a:	f7fe ff91 	bl	80007b0 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	429a      	cmp	r2, r3
 8001898:	d302      	bcc.n	80018a0 <I2C_IsErrorOccurred+0x54>
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d13a      	bne.n	8001916 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018c2:	d121      	bne.n	8001908 <I2C_IsErrorOccurred+0xbc>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018ca:	d01d      	beq.n	8001908 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80018cc:	7cfb      	ldrb	r3, [r7, #19]
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d01a      	beq.n	8001908 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018e2:	f7fe ff65 	bl	80007b0 <HAL_GetTick>
 80018e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e8:	e00e      	b.n	8001908 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018ea:	f7fe ff61 	bl	80007b0 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b19      	cmp	r3, #25
 80018f6:	d907      	bls.n	8001908 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f043 0320 	orr.w	r3, r3, #32
 80018fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001906:	e006      	b.n	8001916 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b20      	cmp	r3, #32
 8001914:	d1e9      	bne.n	80018ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0320 	and.w	r3, r3, #32
 8001920:	2b20      	cmp	r3, #32
 8001922:	d003      	beq.n	800192c <I2C_IsErrorOccurred+0xe0>
 8001924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0aa      	beq.n	8001882 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800192c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2220      	movs	r2, #32
 800193a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00b      	beq.n	8001974 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800196c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800198e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00b      	beq.n	80019b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80019b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01c      	beq.n	80019fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fdaf 	bl	8001524 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <I2C_IsErrorOccurred+0x1bc>)
 80019d2:	400b      	ands	r3, r1
 80019d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	431a      	orrs	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80019fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	fe00e800 	.word	0xfe00e800

08001a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	460b      	mov	r3, r1
 8001a18:	817b      	strh	r3, [r7, #10]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a1e:	897b      	ldrh	r3, [r7, #10]
 8001a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a24:	7a7b      	ldrb	r3, [r7, #9]
 8001a26:	041b      	lsls	r3, r3, #16
 8001a28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	0d5b      	lsrs	r3, r3, #21
 8001a46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001a4a:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <I2C_TransferConfig+0x60>)
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	ea02 0103 	and.w	r1, r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a5e:	bf00      	nop
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	03ff63ff 	.word	0x03ff63ff

08001a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d138      	bne.n	8001af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e032      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2224      	movs	r2, #36	@ 0x24
 8001aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0201 	bic.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6819      	ldr	r1, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d139      	bne.n	8001b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e033      	b.n	8001b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2224      	movs	r2, #36	@ 0x24
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ba4:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	58000400 	.word	0x58000400

08001bc0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001bc4:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	58000400 	.word	0x58000400

08001bdc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bee:	d101      	bne.n	8001bf4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c4e:	d101      	bne.n	8001c54 <LL_RCC_HSE_IsReady+0x18>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <LL_RCC_HSE_IsReady+0x1a>
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c90:	6013      	str	r3, [r2, #0]
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cae:	d101      	bne.n	8001cb4 <LL_RCC_HSI_IsReady+0x18>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <LL_RCC_HSI_IsReady+0x1a>
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d101      	bne.n	8001d46 <LL_RCC_HSI48_IsReady+0x18>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_RCC_HSI48_IsReady+0x1a>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dc8:	f023 0304 	bic.w	r3, r3, #4
 8001dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d101      	bne.n	8001df2 <LL_RCC_LSE_IsReady+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_RCC_LSE_IsReady+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d101      	bne.n	8001e5a <LL_RCC_LSI1_IsReady+0x18>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <LL_RCC_LSI1_IsReady+0x1a>
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d101      	bne.n	8001ec2 <LL_RCC_LSI2_IsReady+0x18>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <LL_RCC_LSI2_IsReady+0x1a>
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ede:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6013      	str	r3, [r2, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d101      	bne.n	8001f4e <LL_RCC_MSI_IsReady+0x16>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_RCC_MSI_IsReady+0x18>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f92:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2bb0      	cmp	r3, #176	@ 0xb0
 8001f98:	d901      	bls.n	8001f9e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001f9a:	23b0      	movs	r3, #176	@ 0xb0
 8001f9c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001f9e:	687b      	ldr	r3, [r7, #4]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 0203 	bic.w	r2, r3, #3
 8001fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 030c 	and.w	r3, r3, #12
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002028:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4313      	orrs	r3, r2
 8002030:	608b      	str	r3, [r1, #8]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800204e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002076:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800207a:	f023 020f 	bic.w	r2, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002108:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214c:	6013      	str	r3, [r2, #0]
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800216a:	d101      	bne.n	8002170 <LL_RCC_PLL_IsReady+0x18>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <LL_RCC_PLL_IsReady+0x1a>
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0303 	and.w	r3, r3, #3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f0:	d101      	bne.n	80021f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800220a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002216:	d101      	bne.n	800221c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800222c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002230:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800223c:	d101      	bne.n	8002242 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002260:	d101      	bne.n	8002266 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002284:	d101      	bne.n	800228a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002286:	2301      	movs	r3, #1
 8002288:	e000      	b.n	800228c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b08d      	sub	sp, #52	@ 0x34
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e363      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 808d 	beq.w	80023d2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b8:	f7ff fea1 	bl	8001ffe <LL_RCC_GetSysClkSource>
 80022bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022be:	f7ff ff82 	bl	80021c6 <LL_RCC_PLL_GetMainSource>
 80022c2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x3e>
 80022ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	d147      	bne.n	8002360 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80022d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d144      	bne.n	8002360 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e347      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80022e6:	f7ff fe4c 	bl	8001f82 <LL_RCC_MSI_GetRange>
 80022ea:	4603      	mov	r3, r0
 80022ec:	429c      	cmp	r4, r3
 80022ee:	d914      	bls.n	800231a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fd03 	bl	8002d00 <RCC_SetFlashLatencyFromMSIRange>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e336      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fe26 	bl	8001f5a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fe4a 	bl	8001fac <LL_RCC_MSI_SetCalibTrimming>
 8002318:	e013      	b.n	8002342 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fe1b 	bl	8001f5a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fe3f 	bl	8001fac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fce4 	bl	8002d00 <RCC_SetFlashLatencyFromMSIRange>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e317      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002342:	f000 fcc9 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002346:	4603      	mov	r3, r0
 8002348:	4aa4      	ldr	r2, [pc, #656]	@ (80025dc <HAL_RCC_OscConfig+0x344>)
 800234a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800234c:	4ba4      	ldr	r3, [pc, #656]	@ (80025e0 <HAL_RCC_OscConfig+0x348>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f9df 	bl	8000714 <HAL_InitTick>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d039      	beq.n	80023d0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e308      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01e      	beq.n	80023a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002368:	f7ff fdc8 	bl	8001efc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236c:	f7fe fa20 	bl	80007b0 <HAL_GetTick>
 8002370:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002374:	f7fe fa1c 	bl	80007b0 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e2f5      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002386:	f7ff fdd7 	bl	8001f38 <LL_RCC_MSI_IsReady>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f1      	beq.n	8002374 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fde0 	bl	8001f5a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fe04 	bl	8001fac <LL_RCC_MSI_SetCalibTrimming>
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023a6:	f7ff fdb8 	bl	8001f1a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fa01 	bl	80007b0 <HAL_GetTick>
 80023ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b2:	f7fe f9fd 	bl	80007b0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e2d6      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80023c4:	f7ff fdb8 	bl	8001f38 <LL_RCC_MSI_IsReady>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f1      	bne.n	80023b2 <HAL_RCC_OscConfig+0x11a>
 80023ce:	e000      	b.n	80023d2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023d0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d047      	beq.n	800246e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023de:	f7ff fe0e 	bl	8001ffe <LL_RCC_GetSysClkSource>
 80023e2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e4:	f7ff feef 	bl	80021c6 <LL_RCC_PLL_GetMainSource>
 80023e8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_OscConfig+0x164>
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d105      	bne.n	8002408 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d134      	bne.n	800246e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e2b4      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0x180>
 8002412:	f7ff fbf5 	bl	8001c00 <LL_RCC_HSE_Enable>
 8002416:	e001      	b.n	800241c <HAL_RCC_OscConfig+0x184>
 8002418:	f7ff fc01 	bl	8001c1e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d012      	beq.n	800244a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe f9c4 	bl	80007b0 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe f9c0 	bl	80007b0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	@ 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e299      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800243e:	f7ff fbfd 	bl	8001c3c <LL_RCC_HSE_IsReady>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f1      	beq.n	800242c <HAL_RCC_OscConfig+0x194>
 8002448:	e011      	b.n	800246e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe f9b1 	bl	80007b0 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002452:	f7fe f9ad 	bl	80007b0 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b64      	cmp	r3, #100	@ 0x64
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e286      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002464:	f7ff fbea 	bl	8001c3c <LL_RCC_HSE_IsReady>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f1      	bne.n	8002452 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d04c      	beq.n	8002514 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247a:	f7ff fdc0 	bl	8001ffe <LL_RCC_GetSysClkSource>
 800247e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002480:	f7ff fea1 	bl	80021c6 <LL_RCC_PLL_GetMainSource>
 8002484:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d005      	beq.n	8002498 <HAL_RCC_OscConfig+0x200>
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d10e      	bne.n	80024b0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d10b      	bne.n	80024b0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e266      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fc09 	bl	8001cc0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024ae:	e031      	b.n	8002514 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d019      	beq.n	80024ec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b8:	f7ff fbd2 	bl	8001c60 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe f978 	bl	80007b0 <HAL_GetTick>
 80024c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c4:	f7fe f974 	bl	80007b0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e24d      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80024d6:	f7ff fbe1 	bl	8001c9c <LL_RCC_HSI_IsReady>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f1      	beq.n	80024c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fbeb 	bl	8001cc0 <LL_RCC_HSI_SetCalibTrimming>
 80024ea:	e013      	b.n	8002514 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ec:	f7ff fbc7 	bl	8001c7e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe f95e 	bl	80007b0 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe f95a 	bl	80007b0 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e233      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800250a:	f7ff fbc7 	bl	8001c9c <LL_RCC_HSI_IsReady>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f1      	bne.n	80024f8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80a3 	beq.w	8002674 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d076      	beq.n	8002624 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	d046      	beq.n	80025d0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002542:	f7ff fc7e 	bl	8001e42 <LL_RCC_LSI1_IsReady>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d113      	bne.n	8002574 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800254c:	f7ff fc57 	bl	8001dfe <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002550:	f7fe f92e 	bl	80007b0 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002558:	f7fe f92a 	bl	80007b0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e203      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800256a:	f7ff fc6a 	bl	8001e42 <LL_RCC_LSI1_IsReady>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f1      	beq.n	8002558 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002574:	f7ff fc77 	bl	8001e66 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe f91a 	bl	80007b0 <HAL_GetTick>
 800257c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002580:	f7fe f916 	bl	80007b0 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b03      	cmp	r3, #3
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e1ef      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002592:	f7ff fc8a 	bl	8001eaa <LL_RCC_LSI2_IsReady>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f1      	beq.n	8002580 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fc94 	bl	8001ece <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80025a6:	f7ff fc3b 	bl	8001e20 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe f901 	bl	80007b0 <HAL_GetTick>
 80025ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025b2:	f7fe f8fd 	bl	80007b0 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1d6      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025c4:	f7ff fc3d 	bl	8001e42 <LL_RCC_LSI1_IsReady>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f1      	bne.n	80025b2 <HAL_RCC_OscConfig+0x31a>
 80025ce:	e051      	b.n	8002674 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80025d0:	f7ff fc15 	bl	8001dfe <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe f8ec 	bl	80007b0 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025da:	e00c      	b.n	80025f6 <HAL_RCC_OscConfig+0x35e>
 80025dc:	20000008 	.word	0x20000008
 80025e0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025e4:	f7fe f8e4 	bl	80007b0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1bd      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025f6:	f7ff fc24 	bl	8001e42 <LL_RCC_LSI1_IsReady>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f1      	beq.n	80025e4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002600:	f7ff fc42 	bl	8001e88 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002606:	f7fe f8d3 	bl	80007b0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1ac      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002618:	f7ff fc47 	bl	8001eaa <LL_RCC_LSI2_IsReady>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f1      	bne.n	8002606 <HAL_RCC_OscConfig+0x36e>
 8002622:	e027      	b.n	8002674 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002624:	f7ff fc30 	bl	8001e88 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe f8c2 	bl	80007b0 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002630:	f7fe f8be 	bl	80007b0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b03      	cmp	r3, #3
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e197      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002642:	f7ff fc32 	bl	8001eaa <LL_RCC_LSI2_IsReady>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f1      	bne.n	8002630 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800264c:	f7ff fbe8 	bl	8001e20 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe f8ae 	bl	80007b0 <HAL_GetTick>
 8002654:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002658:	f7fe f8aa 	bl	80007b0 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e183      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800266a:	f7ff fbea 	bl	8001e42 <LL_RCC_LSI1_IsReady>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f1      	bne.n	8002658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05b      	beq.n	8002738 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002680:	4ba7      	ldr	r3, [pc, #668]	@ (8002920 <HAL_RCC_OscConfig+0x688>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d114      	bne.n	80026b6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800268c:	f7ff fa88 	bl	8001ba0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002690:	f7fe f88e 	bl	80007b0 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7fe f88a 	bl	80007b0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e163      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	4b9d      	ldr	r3, [pc, #628]	@ (8002920 <HAL_RCC_OscConfig+0x688>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_OscConfig+0x42c>
 80026be:	f7ff fb48 	bl	8001d52 <LL_RCC_LSE_Enable>
 80026c2:	e00c      	b.n	80026de <HAL_RCC_OscConfig+0x446>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d104      	bne.n	80026d6 <HAL_RCC_OscConfig+0x43e>
 80026cc:	f7ff fb63 	bl	8001d96 <LL_RCC_LSE_EnableBypass>
 80026d0:	f7ff fb3f 	bl	8001d52 <LL_RCC_LSE_Enable>
 80026d4:	e003      	b.n	80026de <HAL_RCC_OscConfig+0x446>
 80026d6:	f7ff fb4d 	bl	8001d74 <LL_RCC_LSE_Disable>
 80026da:	f7ff fb6d 	bl	8001db8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d014      	beq.n	8002710 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fe f863 	bl	80007b0 <HAL_GetTick>
 80026ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe f85f 	bl	80007b0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e136      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002704:	f7ff fb69 	bl	8001dda <LL_RCC_LSE_IsReady>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ef      	beq.n	80026ee <HAL_RCC_OscConfig+0x456>
 800270e:	e013      	b.n	8002738 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe f84e 	bl	80007b0 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe f84a 	bl	80007b0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e121      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800272e:	f7ff fb54 	bl	8001dda <LL_RCC_LSE_IsReady>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ef      	bne.n	8002718 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d02c      	beq.n	800279e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d014      	beq.n	8002776 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800274c:	f7ff facd 	bl	8001cea <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe f82e 	bl	80007b0 <HAL_GetTick>
 8002754:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002758:	f7fe f82a 	bl	80007b0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e103      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800276a:	f7ff fae0 	bl	8001d2e <LL_RCC_HSI48_IsReady>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f1      	beq.n	8002758 <HAL_RCC_OscConfig+0x4c0>
 8002774:	e013      	b.n	800279e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002776:	f7ff fac9 	bl	8001d0c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe f819 	bl	80007b0 <HAL_GetTick>
 800277e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002782:	f7fe f815 	bl	80007b0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0ee      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002794:	f7ff facb 	bl	8001d2e <LL_RCC_HSI48_IsReady>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f1      	bne.n	8002782 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 80e4 	beq.w	8002970 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a8:	f7ff fc29 	bl	8001ffe <LL_RCC_GetSysClkSource>
 80027ac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 80b4 	bne.w	8002928 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0203 	and.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d123      	bne.n	8002816 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d11c      	bne.n	8002816 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d114      	bne.n	8002816 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d10d      	bne.n	8002816 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d106      	bne.n	8002816 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d05d      	beq.n	80028d2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d058      	beq.n	80028ce <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0a1      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800282e:	f7ff fc84 	bl	800213a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002832:	f7fd ffbd 	bl	80007b0 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fd ffb9 	bl	80007b0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e092      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ef      	bne.n	800283a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <HAL_RCC_OscConfig+0x68c>)
 8002862:	4013      	ands	r3, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800286c:	4311      	orrs	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002872:	0212      	lsls	r2, r2, #8
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800287a:	4311      	orrs	r1, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002886:	430a      	orrs	r2, r1
 8002888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800288c:	4313      	orrs	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002890:	f7ff fc44 	bl	800211c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800289e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a4:	f7fd ff84 	bl	80007b0 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fd ff80 	bl	80007b0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e059      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ef      	beq.n	80028ac <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	e050      	b.n	8002970 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e04f      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d147      	bne.n	8002970 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028e0:	f7ff fc1c 	bl	800211c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f4:	f7fd ff5c 	bl	80007b0 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fd ff58 	bl	80007b0 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e031      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ef      	beq.n	80028fc <HAL_RCC_OscConfig+0x664>
 800291c:	e028      	b.n	8002970 <HAL_RCC_OscConfig+0x6d8>
 800291e:	bf00      	nop
 8002920:	58000400 	.word	0x58000400
 8002924:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d01e      	beq.n	800296c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800292e:	f7ff fc04 	bl	800213a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002932:	f7fd ff3d 	bl	80007b0 <HAL_GetTick>
 8002936:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800293a:	f7fd ff39 	bl	80007b0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e012      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ef      	bne.n	800293a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002964:	4b05      	ldr	r3, [pc, #20]	@ (800297c <HAL_RCC_OscConfig+0x6e4>)
 8002966:	4013      	ands	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]
 800296a:	e001      	b.n	8002970 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3734      	adds	r7, #52	@ 0x34
 8002976:	46bd      	mov	sp, r7
 8002978:	bd90      	pop	{r4, r7, pc}
 800297a:	bf00      	nop
 800297c:	eefefffc 	.word	0xeefefffc

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e12d      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b98      	ldr	r3, [pc, #608]	@ (8002bf8 <HAL_RCC_ClockConfig+0x278>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d91b      	bls.n	80029da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b95      	ldr	r3, [pc, #596]	@ (8002bf8 <HAL_RCC_ClockConfig+0x278>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 0207 	bic.w	r2, r3, #7
 80029aa:	4993      	ldr	r1, [pc, #588]	@ (8002bf8 <HAL_RCC_ClockConfig+0x278>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b2:	f7fd fefd 	bl	80007b0 <HAL_GetTick>
 80029b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029ba:	f7fd fef9 	bl	80007b0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e111      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029cc:	4b8a      	ldr	r3, [pc, #552]	@ (8002bf8 <HAL_RCC_ClockConfig+0x278>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d1ef      	bne.n	80029ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fb13 	bl	8002016 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029f0:	f7fd fede 	bl	80007b0 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029f8:	f7fd feda 	bl	80007b0 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e0f2      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a0a:	f7ff fbe8 	bl	80021de <LL_RCC_IsActiveFlag_HPRE>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f1      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d016      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fb0a 	bl	800203e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a2a:	f7fd fec1 	bl	80007b0 <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a32:	f7fd febd 	bl	80007b0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0d5      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a44:	f7ff fbdd 	bl	8002202 <LL_RCC_IsActiveFlag_C2HPRE>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f1      	beq.n	8002a32 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fb03 	bl	800206a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a64:	f7fd fea4 	bl	80007b0 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a6c:	f7fd fea0 	bl	80007b0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0b8      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a7e:	f7ff fbd3 	bl	8002228 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f1      	beq.n	8002a6c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d016      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fafd 	bl	8002098 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a9e:	f7fd fe87 	bl	80007b0 <HAL_GetTick>
 8002aa2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aa6:	f7fd fe83 	bl	80007b0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e09b      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ab8:	f7ff fbc9 	bl	800224e <LL_RCC_IsActiveFlag_PPRE1>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f1      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d017      	beq.n	8002afe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff faf3 	bl	80020c0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ada:	f7fd fe69 	bl	80007b0 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ae2:	f7fd fe65 	bl	80007b0 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e07d      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002af4:	f7ff fbbd 	bl	8002272 <LL_RCC_IsActiveFlag_PPRE2>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f1      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d043      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b12:	f7ff f893 	bl	8001c3c <LL_RCC_HSE_IsReady>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11e      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e067      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b28:	f7ff fb16 	bl	8002158 <LL_RCC_PLL_IsReady>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d113      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e05c      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b3e:	f7ff f9fb 	bl	8001f38 <LL_RCC_MSI_IsReady>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d108      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e051      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b4c:	f7ff f8a6 	bl	8001c9c <LL_RCC_HSI_IsReady>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e04a      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fa39 	bl	8001fd6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fd fe24 	bl	80007b0 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7fd fe20 	bl	80007b0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e036      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	f7ff fa3c 	bl	8001ffe <LL_RCC_GetSysClkSource>
 8002b86:	4602      	mov	r2, r0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d1ec      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b92:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCC_ClockConfig+0x278>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d21b      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba0:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <HAL_RCC_ClockConfig+0x278>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f023 0207 	bic.w	r2, r3, #7
 8002ba8:	4913      	ldr	r1, [pc, #76]	@ (8002bf8 <HAL_RCC_ClockConfig+0x278>)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb0:	f7fd fdfe 	bl	80007b0 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bb8:	f7fd fdfa 	bl	80007b0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e012      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bca:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_ClockConfig+0x278>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d1ef      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bd8:	f000 f87e 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4a07      	ldr	r2, [pc, #28]	@ (8002bfc <HAL_RCC_ClockConfig+0x27c>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002be2:	f7fd fdf1 	bl	80007c8 <HAL_GetTickPrio>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd fd93 	bl	8000714 <HAL_InitTick>
 8002bee:	4603      	mov	r3, r0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	58004000 	.word	0x58004000
 8002bfc:	20000008 	.word	0x20000008

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c06:	f7ff f9fa 	bl	8001ffe <LL_RCC_GetSysClkSource>
 8002c0a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c12:	f7ff f9b6 	bl	8001f82 <LL_RCC_MSI_GetRange>
 8002c16:	4603      	mov	r3, r0
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e04b      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c2e:	4b28      	ldr	r3, [pc, #160]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e045      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d10a      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c3a:	f7fe ffcf 	bl	8001bdc <LL_RCC_HSE_IsEnabledDiv2>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c44:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	e03a      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c4a:	4b22      	ldr	r3, [pc, #136]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e037      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c50:	f7ff fab9 	bl	80021c6 <LL_RCC_PLL_GetMainSource>
 8002c54:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d003      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x64>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x6a>
 8002c62:	e00d      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c64:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c66:	60bb      	str	r3, [r7, #8]
        break;
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c6a:	f7fe ffb7 	bl	8001bdc <LL_RCC_HSE_IsEnabledDiv2>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d102      	bne.n	8002c7a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c74:	4b16      	ldr	r3, [pc, #88]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c76:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c78:	e00d      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002c7a:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c7c:	60bb      	str	r3, [r7, #8]
        break;
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c80:	f7ff f97f 	bl	8001f82 <LL_RCC_MSI_GetRange>
 8002c84:	4603      	mov	r3, r0
 8002c86:	091b      	lsrs	r3, r3, #4
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	60bb      	str	r3, [r7, #8]
        break;
 8002c94:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002c96:	f7ff fa71 	bl	800217c <LL_RCC_PLL_GetN>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	fb03 f402 	mul.w	r4, r3, r2
 8002ca2:	f7ff fa84 	bl	80021ae <LL_RCC_PLL_GetDivider>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	3301      	adds	r3, #1
 8002cac:	fbb4 f4f3 	udiv	r4, r4, r3
 8002cb0:	f7ff fa71 	bl	8002196 <LL_RCC_PLL_GetR>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	0f5b      	lsrs	r3, r3, #29
 8002cb8:	3301      	adds	r3, #1
 8002cba:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cbe:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	0800378c 	.word	0x0800378c
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	01e84800 	.word	0x01e84800

08002cd8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b598      	push	{r3, r4, r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002cdc:	f7ff ff90 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	f7ff fa01 	bl	80020e8 <LL_RCC_GetAHBPrescaler>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	4a03      	ldr	r2, [pc, #12]	@ (8002cfc <HAL_RCC_GetHCLKFreq+0x24>)
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd98      	pop	{r3, r4, r7, pc}
 8002cfc:	0800374c 	.word	0x0800374c

08002d00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d0c:	d903      	bls.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e007      	b.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	4a11      	ldr	r2, [pc, #68]	@ (8002d64 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d24:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d26:	f7ff f9eb 	bl	8002100 <LL_RCC_GetAHB4Prescaler>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	4a0d      	ldr	r2, [pc, #52]	@ (8002d68 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a0a      	ldr	r2, [pc, #40]	@ (8002d6c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0c9c      	lsrs	r4, r3, #18
 8002d4a:	f7fe ff39 	bl	8001bc0 <HAL_PWREx_GetVoltageRange>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4619      	mov	r1, r3
 8002d52:	4620      	mov	r0, r4
 8002d54:	f000 f80c 	bl	8002d70 <RCC_SetFlashLatency>
 8002d58:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd90      	pop	{r4, r7, pc}
 8002d62:	bf00      	nop
 8002d64:	0800378c 	.word	0x0800378c
 8002d68:	0800374c 	.word	0x0800374c
 8002d6c:	431bde83 	.word	0x431bde83

08002d70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b093      	sub	sp, #76	@ 0x4c
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d7a:	4b37      	ldr	r3, [pc, #220]	@ (8002e58 <RCC_SetFlashLatency+0xe8>)
 8002d7c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002d80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002d86:	4a35      	ldr	r2, [pc, #212]	@ (8002e5c <RCC_SetFlashLatency+0xec>)
 8002d88:	f107 031c 	add.w	r3, r7, #28
 8002d8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002d92:	4b33      	ldr	r3, [pc, #204]	@ (8002e60 <RCC_SetFlashLatency+0xf0>)
 8002d94:	f107 040c 	add.w	r4, r7, #12
 8002d98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002d9e:	2300      	movs	r3, #0
 8002da0:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da8:	d11a      	bne.n	8002de0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dae:	e013      	b.n	8002dd8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002db0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	3348      	adds	r3, #72	@ 0x48
 8002db6:	443b      	add	r3, r7
 8002db8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d807      	bhi.n	8002dd2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	3348      	adds	r3, #72	@ 0x48
 8002dc8:	443b      	add	r3, r7
 8002dca:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002dce:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002dd0:	e020      	b.n	8002e14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d9e8      	bls.n	8002db0 <RCC_SetFlashLatency+0x40>
 8002dde:	e019      	b.n	8002e14 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de4:	e013      	b.n	8002e0e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	3348      	adds	r3, #72	@ 0x48
 8002dec:	443b      	add	r3, r7
 8002dee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d807      	bhi.n	8002e08 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	3348      	adds	r3, #72	@ 0x48
 8002dfe:	443b      	add	r3, r7
 8002e00:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e04:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e06:	e005      	b.n	8002e14 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d9e8      	bls.n	8002de6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002e14:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <RCC_SetFlashLatency+0xf4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 0207 	bic.w	r2, r3, #7
 8002e1c:	4911      	ldr	r1, [pc, #68]	@ (8002e64 <RCC_SetFlashLatency+0xf4>)
 8002e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e20:	4313      	orrs	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e24:	f7fd fcc4 	bl	80007b0 <HAL_GetTick>
 8002e28:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e2a:	e008      	b.n	8002e3e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e2c:	f7fd fcc0 	bl	80007b0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e007      	b.n	8002e4e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e3e:	4b09      	ldr	r3, [pc, #36]	@ (8002e64 <RCC_SetFlashLatency+0xf4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1ef      	bne.n	8002e2c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	374c      	adds	r7, #76	@ 0x4c
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	bf00      	nop
 8002e58:	08003720 	.word	0x08003720
 8002e5c:	08003730 	.word	0x08003730
 8002e60:	0800373c 	.word	0x0800373c
 8002e64:	58004000 	.word	0x58004000

08002e68 <LL_RCC_LSE_IsEnabled>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <LL_RCC_LSE_IsEnabled+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_RCC_LSE_IsEnabled+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_RCC_LSE_IsReady>:
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d101      	bne.n	8002ea4 <LL_RCC_LSE_IsReady+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_RCC_LSE_IsReady+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_SetRFWKPClockSource>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ec4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_SetSMPSClockSource>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	f023 0203 	bic.w	r2, r3, #3
 8002eee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_SetSMPSPrescaler>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_SetUSARTClockSource>:
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	f023 0203 	bic.w	r2, r3, #3
 8002f40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_RCC_SetLPUARTClockSource>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <LL_RCC_SetI2CClockSource>:
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f90:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002fa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <LL_RCC_SetLPTIMClockSource>:
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fe6:	bf00      	nop
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_RCC_SetSAIClockSource>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003006:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_RCC_SetRNGClockSource>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003032:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_RCC_SetCLK48ClockSource>:
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800305e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_RCC_SetUSBClockSource>:
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffe3 	bl	800304a <LL_RCC_SetCLK48ClockSource>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <LL_RCC_SetADCClockSource>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_RCC_SetRTCClockSource>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_RCC_GetRTCClockSource>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_RCC_ForceBackupDomainReset>:
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800310e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_RCC_PLLSAI1_Enable>:
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003150:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_RCC_PLLSAI1_Disable>:
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800316e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_RCC_PLLSAI1_IsReady>:
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800318c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003190:	d101      	bne.n	8003196 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b088      	sub	sp, #32
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80031aa:	2300      	movs	r3, #0
 80031ac:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80031ae:	2300      	movs	r3, #0
 80031b0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d034      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031c6:	d021      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80031c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80031cc:	d81b      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031d2:	d01d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80031d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031d8:	d815      	bhi.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80031de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031e2:	d110      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80031f4:	e00d      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f947 	bl	800348e <RCCEx_PLLSAI1_ConfigNP>
 8003200:	4603      	mov	r3, r0
 8003202:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003204:	e005      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	77fb      	strb	r3, [r7, #31]
        break;
 800320a:	e002      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800320c:	bf00      	nop
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003212:	7ffb      	ldrb	r3, [r7, #31]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fee8 	bl	8002ff2 <LL_RCC_SetSAIClockSource>
 8003222:	e001      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003224:	7ffb      	ldrb	r3, [r7, #31]
 8003226:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003230:	2b00      	cmp	r3, #0
 8003232:	d046      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003234:	f7ff ff56 	bl	80030e4 <LL_RCC_GetRTCClockSource>
 8003238:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	429a      	cmp	r2, r3
 8003242:	d03c      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003244:	f7fe fcac 	bl	8001ba0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d105      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff30 	bl	80030b8 <LL_RCC_SetRTCClockSource>
 8003258:	e02e      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003264:	f7ff ff4b 	bl	80030fe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003268:	f7ff ff5a 	bl	8003120 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800327a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003284:	f7ff fdf0 	bl	8002e68 <LL_RCC_LSE_IsEnabled>
 8003288:	4603      	mov	r3, r0
 800328a:	2b01      	cmp	r3, #1
 800328c:	d114      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800328e:	f7fd fa8f 	bl	80007b0 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003294:	e00b      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fd fa8b 	bl	80007b0 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d902      	bls.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	77fb      	strb	r3, [r7, #31]
              break;
 80032ac:	e004      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80032ae:	f7ff fded 	bl	8002e8c <LL_RCC_LSE_IsReady>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d1ee      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80032b8:	7ffb      	ldrb	r3, [r7, #31]
 80032ba:	77bb      	strb	r3, [r7, #30]
 80032bc:	e001      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032be:	7ffb      	ldrb	r3, [r7, #31]
 80032c0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fe2a 	bl	8002f2c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fe35 	bl	8002f58 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fe5d 	bl	8002fbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fe52 	bl	8002fbe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fe2a 	bl	8002f84 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b00      	cmp	r3, #0
 800333a:	d004      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fe1f 	bl	8002f84 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d022      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe8d 	bl	8003076 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003364:	d107      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003370:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003374:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800337e:	d10b      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f8dd 	bl	8003544 <RCCEx_PLLSAI1_ConfigNQ>
 800338a:	4603      	mov	r3, r0
 800338c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800338e:	7ffb      	ldrb	r3, [r7, #31]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003394:	7ffb      	ldrb	r3, [r7, #31]
 8003396:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d02b      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ac:	d008      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033b6:	d003      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fe2a 	bl	800301e <LL_RCC_SetRNGClockSource>
 80033ca:	e00a      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	60fb      	str	r3, [r7, #12]
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7ff fe21 	bl	800301e <LL_RCC_SetRNGClockSource>
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff fe34 	bl	800304a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80033ea:	d107      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80033ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003404:	2b00      	cmp	r3, #0
 8003406:	d022      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fe3d 	bl	800308c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800341a:	d107      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800341c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003434:	d10b      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f8dd 	bl	80035fa <RCCEx_PLLSAI1_ConfigNR>
 8003440:	4603      	mov	r3, r0
 8003442:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003444:	7ffb      	ldrb	r3, [r7, #31]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800344a:	7ffb      	ldrb	r3, [r7, #31]
 800344c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fd26 	bl	8002eb0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fd45 	bl	8002f04 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fd2c 	bl	8002edc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003484:	7fbb      	ldrb	r3, [r7, #30]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3720      	adds	r7, #32
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800349a:	f7ff fe61 	bl	8003160 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800349e:	f7fd f987 	bl	80007b0 <HAL_GetTick>
 80034a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034a4:	e009      	b.n	80034ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a6:	f7fd f983 	bl	80007b0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d902      	bls.n	80034ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	73fb      	strb	r3, [r7, #15]
      break;
 80034b8:	e004      	b.n	80034c4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034ba:	f7ff fe60 	bl	800317e <LL_RCC_PLLSAI1_IsReady>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d137      	bne.n	800353a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	021b      	lsls	r3, r3, #8
 80034da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034de:	4313      	orrs	r3, r2
 80034e0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80034e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034f4:	4313      	orrs	r3, r2
 80034f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80034f8:	f7ff fe23 	bl	8003142 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fd f958 	bl	80007b0 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003504:	f7fd f954 	bl	80007b0 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
        break;
 8003516:	e004      	b.n	8003522 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003518:	f7ff fe31 	bl	800317e <LL_RCC_PLLSAI1_IsReady>
 800351c:	4603      	mov	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d1f0      	bne.n	8003504 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d108      	bne.n	800353a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003536:	4313      	orrs	r3, r2
 8003538:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003550:	f7ff fe06 	bl	8003160 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003554:	f7fd f92c 	bl	80007b0 <HAL_GetTick>
 8003558:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800355a:	e009      	b.n	8003570 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800355c:	f7fd f928 	bl	80007b0 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d902      	bls.n	8003570 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	73fb      	strb	r3, [r7, #15]
      break;
 800356e:	e004      	b.n	800357a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003570:	f7ff fe05 	bl	800317e <LL_RCC_PLLSAI1_IsReady>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d137      	bne.n	80035f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003594:	4313      	orrs	r3, r2
 8003596:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035aa:	4313      	orrs	r3, r2
 80035ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035ae:	f7ff fdc8 	bl	8003142 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b2:	f7fd f8fd 	bl	80007b0 <HAL_GetTick>
 80035b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035b8:	e009      	b.n	80035ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ba:	f7fd f8f9 	bl	80007b0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d902      	bls.n	80035ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	73fb      	strb	r3, [r7, #15]
        break;
 80035cc:	e004      	b.n	80035d8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035ce:	f7ff fdd6 	bl	800317e <LL_RCC_PLLSAI1_IsReady>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d1f0      	bne.n	80035ba <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035ec:	4313      	orrs	r3, r2
 80035ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003606:	f7ff fdab 	bl	8003160 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800360a:	f7fd f8d1 	bl	80007b0 <HAL_GetTick>
 800360e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003610:	e009      	b.n	8003626 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003612:	f7fd f8cd 	bl	80007b0 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d902      	bls.n	8003626 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e004      	b.n	8003630 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003626:	f7ff fdaa 	bl	800317e <LL_RCC_PLLSAI1_IsReady>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d137      	bne.n	80036a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800364a:	4313      	orrs	r3, r2
 800364c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003660:	4313      	orrs	r3, r2
 8003662:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003664:	f7ff fd6d 	bl	8003142 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003668:	f7fd f8a2 	bl	80007b0 <HAL_GetTick>
 800366c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800366e:	e009      	b.n	8003684 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003670:	f7fd f89e 	bl	80007b0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d902      	bls.n	8003684 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	73fb      	strb	r3, [r7, #15]
        break;
 8003682:	e004      	b.n	800368e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003684:	f7ff fd7b 	bl	800317e <LL_RCC_PLLSAI1_IsReady>
 8003688:	4603      	mov	r3, r0
 800368a:	2b01      	cmp	r3, #1
 800368c:	d1f0      	bne.n	8003670 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d108      	bne.n	80036a6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036a2:	4313      	orrs	r3, r2
 80036a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <memset>:
 80036b0:	4402      	add	r2, r0
 80036b2:	4603      	mov	r3, r0
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d100      	bne.n	80036ba <memset+0xa>
 80036b8:	4770      	bx	lr
 80036ba:	f803 1b01 	strb.w	r1, [r3], #1
 80036be:	e7f9      	b.n	80036b4 <memset+0x4>

080036c0 <__libc_init_array>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	4d0d      	ldr	r5, [pc, #52]	@ (80036f8 <__libc_init_array+0x38>)
 80036c4:	4c0d      	ldr	r4, [pc, #52]	@ (80036fc <__libc_init_array+0x3c>)
 80036c6:	1b64      	subs	r4, r4, r5
 80036c8:	10a4      	asrs	r4, r4, #2
 80036ca:	2600      	movs	r6, #0
 80036cc:	42a6      	cmp	r6, r4
 80036ce:	d109      	bne.n	80036e4 <__libc_init_array+0x24>
 80036d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003700 <__libc_init_array+0x40>)
 80036d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003704 <__libc_init_array+0x44>)
 80036d4:	f000 f818 	bl	8003708 <_init>
 80036d8:	1b64      	subs	r4, r4, r5
 80036da:	10a4      	asrs	r4, r4, #2
 80036dc:	2600      	movs	r6, #0
 80036de:	42a6      	cmp	r6, r4
 80036e0:	d105      	bne.n	80036ee <__libc_init_array+0x2e>
 80036e2:	bd70      	pop	{r4, r5, r6, pc}
 80036e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e8:	4798      	blx	r3
 80036ea:	3601      	adds	r6, #1
 80036ec:	e7ee      	b.n	80036cc <__libc_init_array+0xc>
 80036ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f2:	4798      	blx	r3
 80036f4:	3601      	adds	r6, #1
 80036f6:	e7f2      	b.n	80036de <__libc_init_array+0x1e>
 80036f8:	080037cc 	.word	0x080037cc
 80036fc:	080037cc 	.word	0x080037cc
 8003700:	080037cc 	.word	0x080037cc
 8003704:	080037d0 	.word	0x080037d0

08003708 <_init>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	bf00      	nop
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr

08003714 <_fini>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr
